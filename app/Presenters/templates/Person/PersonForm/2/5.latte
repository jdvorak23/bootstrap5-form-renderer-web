{block content}
<p>
    Maybe you wonder why there aren't two <span class="code-string">'group col'</span> wrappers, one for each button.
    It works very similar as <a href="https://doc.nette.org/en/forms/rendering#toc-renderer" target="_blank">DefaultFormRenderer</a>
    - buttons, which are next to each other, are rendered to one same
    wrapper defined in <code class="language-php text-nowrap">$wrappers['controls']['buttons']</code>.
</p>

<p>
    In both grids, this button wrapper is taken and processed as one item. This button wrapper is created only if buttons
    are not part of the input group, but this is topic of next chapters. You can
    <a href="https://github.com/jdvorak23/bootstrap5-form-renderer/wiki/Layout#group-and-grid-part" target="_blank">
        read about these wrappers in reference with layout picture.
    </a>
</p>
<p>
    We handled buttons, now we need do something with controls in <span class="code-string">'Others'</span> Group. There are two text inputs
    and textarea, on md-+ screens we have useless space right from textarea and that doesn't look well.
</p>
<p>That's exactly case we can use the second grid system - <strong>control level</strong> - it is defined only on controls, by
    <a href="https://github.com/jdvorak23/bootstrap5-form-renderer/wiki/Control%20Options#row" target="_blank">row</a> and
    <a href="https://github.com/jdvorak23/bootstrap5-form-renderer/wiki/Control%20Options#col" target="_blank">col</a> options.
    You <em>start</em> it on some control by setting <a href="https://github.com/jdvorak23/bootstrap5-form-renderer/wiki/Control%20Options#row" target="_blank">row</a>
    option, and then renderer automatically add every next item to it, until you end it by setting <a href="https://github.com/jdvorak23/bootstrap5-form-renderer/wiki/Control%20Options#row" target="_blank">row</a>
    option on some next control, or until end of the ControlGroup.
</p>
<p>Lets show an example on our PersonForm:</p>
<pre>
<code class="language-php">
$design('account')->setGrid(true);
$design('note')->setGrid(false);
</code>
</pre>
<p>We set grid start on control <span class="code-string">'account'</span>, <span class="code-value">true</span> means default wrapper (it is default value).
    We haven't specified <span class="code-string">'col'</span> - the default wrapper <span class="code-string">'controls col'</span> is taken.</p>
<div class="alert alert-info">
    <strong>$wrappers['controls']['row'] </strong> is default wrapper for Control-level grid.<br>
    <strong>$wrappers['controls']['col'] </strong> is default wrapper for Control-level column.
</div>
<p>Our <span class="code-string">'note'</span> textarea shouldn't be in grid, so we set <span class="code-string">'row'</span>
    to <span class="code-value">false</span>, ended previous grid.</p>
<p>Now we already have this:</p>
<pre>
<code class="language-php">
{$form->getFactoryMethod()}
</code>
</pre>